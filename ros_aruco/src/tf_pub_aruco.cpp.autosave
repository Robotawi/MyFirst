#include <ros/ros.h>
#include <tf/transform_broadcaster.h>
//#include <turtlesim/Pose.h>
#include <ros_aruco/Markers.h>
#include <math.h>

double norm;
double angle;
float axis[3];
//tf::tfScalar angle;
tf::Vector3 axis_vec3[3];
void poseCallback(const ros_aruco::Markers &msg){

    if (msg.count==0)
    {
        ROS_INFO_STREAM("No markers detected");
    }
    else
    {
        //ROS_INFO_STREAM(msg.T[0] << msg.T[1] << msg.T[2]);
        tf::TransformBroadcaster br;
        tf::Transform transform;
        transform.setOrigin( tf::Vector3(msg.T[0], msg.T[1], msg.T[2]) );
        //The rotation part
        //Calculate the quaternion from the axis-angle representation
        //the norm will give the angle
        angle = sqrt(pow(msg.R[0], 2.0)+pow(msg.R[1], 2.0)+pow(msg.R[2], 2.0));
        //the axis
        for (int i=0;i<3;i++)
        {
            axis[i]=msg.R[i]/angle;
        }
        //ROS_INFO_STREAM("the axis is: " << axis[0]<<", "<<axis[1]<<", "<<axis[2] << "  the angle is" << norm);

        axis_vec3[1]= new tf::Vector3(axis[0], axis[1], axis[2]);

        tf::Quaternion q;

        q.setRotation(axis_Vec3,angle);

        transform.setRotation(q);

        br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "tf_aruco_only", "child_tf_aruco_only"));
       /*
        q.setRPY(msg.R[0], msg.R[1], msg.R[2]);
        */

    }
/*
  tf::TransformBroadcaster br;
  tf::Transform transform;
  transform.setOrigin( tf::Vector3(msg->T[0], msg->T[1], msg->T[2]) );
  tf::Quaternion q;
  q.setRPY(msg->R[0], msg->R[1], msg->R[2]);
  transform.setRotation(q);
  br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "tf_aruco_only", "child_tf_aruco_only"));
*/
//    ROS_INFO_STREAM(aruco_pose->T[0] << aruco_pose->T[1] << aruco_pose->T[2]);
    //ROS_INFO_STREAM(msg->R);
    //ROS_INFO_STREAM(msg);

}

int main(int argc, char** argv){
  ros::init(argc, argv, "tf_aruco_broadcaster");
  //if (argc != 2){ROS_ERROR("need turtle name as argument"); return -1;};
  //turtle_name = argv[1];

  ros::NodeHandle node;
  ros::Subscriber sub = node.subscribe("/ros_aruco/markers", 1000, &poseCallback);
  ros::Rate rate(29);
  rate.sleep();
  ros::spin();
  //return 0;
}
